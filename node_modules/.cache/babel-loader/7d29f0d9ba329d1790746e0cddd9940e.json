{"ast":null,"code":"import axios from 'axios';\n/** \n * @param {*} fname First name \n * @param {*} lname Last name\n * @param {*} username User email\n * @param {*} password User password\n * @description: This function pass the user input values fron UI to the server and \n *               save the user details to the database and generate token for confirming useremail\n */\n\nfunction userRegister(fname, lname, username, password) {\n  axios.post('/registration', {\n    firstName: fname,\n    lastName: lname,\n    email: username,\n    password: password\n  }).then(function (response) {\n    // console.log(\"response after register\", response.data);\n    var token1 = response.data;\n    var token2 = token1.substring(34);\n    localStorage.setItem('verifyToken', token2);\n    alert('Please check email to verify your email !!!');\n  }).catch(function (err) {\n    console.log(err);\n    alert('User with this Username already exists!!');\n  });\n}\n/**\n * @param {*} token It is the token taken from url when user click on the email verification link\n * @description This method is to verify user email after registration is done.\n */\n\n\nfunction checkToken(token) {\n  console.log('63--inside check token---', token);\n  axios.post(\"/verifyEmail/\".concat(token), \"\", {\n    headers: {\n      'token': token\n    }\n  }).then(function (response) {\n    alert('User verified successfully');\n    window.location.href = '/login';\n  }).catch(function (err) {\n    console.log(err);\n    alert('User is not verified.. Please verify email!!');\n  });\n}\n/**\n * @param {*} username is the user email id\n * @param {*} password is the password of user for login to the dashboard\n * @description This method is posted after the user email verification is done\n */\n\n\nfunction userLogin(username, password) {\n  axios.post('https://46yk5vclj7.execute-api.us-west-2.amazonaws.com/serverless/users/login', {\n    userEmail: username,\n    userPassword: password\n  }).then(function (response) {\n    localStorage.setItem('token', response.data.token);\n    localStorage.setItem('username', username);\n    window.location.href = 'dashboard';\n  }).catch(function (err) {\n    console.log(err);\n    alert('Login Unsuccessful.. Please Try Again!!');\n  });\n}\n/**\n * @param {*} username is the email of user to whom reset password link is to be send\n * @description This axios is posted to verifyUserEmail to send reset password link \n *              to the verified user only\n */\n\n\nfunction forgetPassword(username) {\n  axios.post('/verifyUser', {\n    'email': username\n  }).then(function (response) {\n    // console.log('53--Inside forgetPassword response is--',response.data);\n    // const token1 = response.data;\n    // const token2 = token1.substring(34)\n    // localStorage.setItem('verifyUserToken', token2);\n    alert('Password change link is send to valid email plz check..');\n  }).catch(function (err) {\n    console.log(err);\n    alert('User Not Found..');\n  });\n}\n/**\n * @param {*} password new password to user account\n * @param {*} token is token to verify whether verified user has clicked on reset password link or not\n */\n\n\nfunction resetPassword(password, token) {\n  console.log('83--inside reset paswd password--', password);\n  console.log('84--inside reset paswd token--', token);\n  axios.post(\"/resetpassword/\".concat(token), {\n    'password': password\n  }, {\n    headers: {\n      'token': token\n    }\n  }).then(function (response) {\n    alert('Password changed successfully');\n    window.location.href = '/login';\n  }).catch(function (err) {\n    console.log(err);\n    alert('Password change Unsuccessful.. Please Try Again!!');\n  });\n}\n\nexport { userRegister, userLogin, forgetPassword, checkToken, resetPassword };","map":{"version":3,"sources":["/home/bridgeit/Shweta/Serverlessfrontend/src/services/userService.js"],"names":["axios","userRegister","fname","lname","username","password","post","firstName","lastName","email","then","response","token1","data","token2","substring","localStorage","setItem","alert","catch","err","console","log","checkToken","token","headers","window","location","href","userLogin","userEmail","userPassword","forgetPassword","resetPassword"],"mappings":"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","sourcesContent":["import axios from 'axios';\n/** \n * @param {*} fname First name \n * @param {*} lname Last name\n * @param {*} username User email\n * @param {*} password User password\n * @description: This function pass the user input values fron UI to the server and \n *               save the user details to the database and generate token for confirming useremail\n */\nfunction userRegister(fname, lname, username, password) {\n    axios.post('/registration',\n        {\n            firstName: fname,\n            lastName: lname,\n            email: username,\n            password: password\n        })\n        .then(function (response) {\n            // console.log(\"response after register\", response.data);\n            const token1 = response.data;\n            const token2 = token1.substring(34)\n            localStorage.setItem('verifyToken', token2);\n            alert('Please check email to verify your email !!!');  \n        })\n        .catch(function (err) {\n            console.log(err);\n            alert('User with this Username already exists!!');\n        });\n}\n\n/**\n * @param {*} token It is the token taken from url when user click on the email verification link\n * @description This method is to verify user email after registration is done.\n */\nfunction checkToken(token) {\n    console.log('63--inside check token---',token);\n    axios.post(`/verifyEmail/${token}`,\"\",{ headers: {\n        'token': token\n    }})\n        .then(function (response) {\n            alert('User verified successfully');\n            window.location.href = '/login'\n        })\n        .catch(function (err) {\n            console.log(err);\n            alert('User is not verified.. Please verify email!!');\n        });\n}\n\n/**\n * @param {*} username is the user email id\n * @param {*} password is the password of user for login to the dashboard\n * @description This method is posted after the user email verification is done\n */\nfunction userLogin(username, password) {\n    axios.post('https://46yk5vclj7.execute-api.us-west-2.amazonaws.com/serverless/users/login',\n        {\n            userEmail: username,\n            userPassword: password\n        })\n        .then(function (response) {\n            localStorage.setItem('token', response.data.token);\n            localStorage.setItem('username', username);\n            window.location.href = 'dashboard'\n        })\n        .catch(function (err) {\n            console.log(err);\n            alert('Login Unsuccessful.. Please Try Again!!');\n        });\n}\n\n/**\n * @param {*} username is the email of user to whom reset password link is to be send\n * @description This axios is posted to verifyUserEmail to send reset password link \n *              to the verified user only\n */\nfunction forgetPassword(username) {\n    axios.post('/verifyUser',\n    {\n        'email': username,\n    })\n    .then(function (response) {\n        // console.log('53--Inside forgetPassword response is--',response.data);\n        // const token1 = response.data;\n        // const token2 = token1.substring(34)\n        // localStorage.setItem('verifyUserToken', token2);\n        alert('Password change link is send to valid email plz check..')\n    })\n    .catch(function (err) {\n        console.log(err);\n        alert('User Not Found..');\n    });\n}\n\n/**\n * @param {*} password new password to user account\n * @param {*} token is token to verify whether verified user has clicked on reset password link or not\n */\nfunction resetPassword(password,token) {\n    console.log('83--inside reset paswd password--',password);\n    console.log('84--inside reset paswd token--',token);\n    \n    axios.post(`/resetpassword/${token}`,{'password': password},{\n     headers: {\n        'token': token\n    }})\n    .then(function (response) {\n        alert('Password changed successfully');\n            window.location.href = '/login'\n    })\n    .catch(function (err) {\n        console.log(err);\n        alert('Password change Unsuccessful.. Please Try Again!!');\n    });\n}\n\nexport { userRegister, userLogin, forgetPassword, checkToken, resetPassword }"]},"metadata":{},"sourceType":"module"}